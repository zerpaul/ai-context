{"version":3,"file":"extension.js","mappings":"23BAIA,oBAAyBA,GACrBC,QAAQC,IAAI,sCAEZ,MAAMC,EAAaC,EAAOC,SAASC,gBAAgB,2BAA2BC,MAAOC,IACjF,IACI,IAAKA,EAED,YADAJ,EAAOK,OAAOC,iBAAiB,0DAOnC,UAHoBC,EAAGC,KAAKJ,EAAIK,SAGtBC,cAAe,CACrB,MAAMC,EAAaP,EAAIK,OAGjBG,EAAiB,GAFJC,EAAKC,SAASH,OACf,IAAII,MAAOC,cAAcC,QAAQ,QAAS,WAEtDC,EAAaL,EAAKM,KAAKR,EAAYC,GAIzC,aA+FhBT,eAAoCQ,EAAoBO,SAC9ClB,EAAOK,OAAOe,aAAa,CAC7BC,SAAUrB,EAAOsB,iBAAiBC,aAClCC,MAAO,+BACPC,aAAa,IACdtB,MAAOuB,IACN,IAAIC,EAAS,sCACbA,GAAU,iBAAiBhB,MAC3BgB,GAAU,eAAc,IAAIZ,MAAOC,kBAEnC,MAAMY,QAoEdzB,eAA2B0B,GACvB,MAAMD,EAAkB,GAmBxB,aAjBAzB,eAAe2B,EAASC,GACpB,MAAMC,QAAgBzB,EAAG0B,QAAQF,EAAa,CAAEG,eAAe,IAE/D,IAAK,MAAMC,KAASH,EAAS,CACzB,MAAMI,EAAWvB,EAAKM,KAAKY,EAAaI,EAAME,MAG1CF,EAAMzB,gBAAkByB,EAAME,KAAKC,WAAW,MAAuB,iBAAfH,EAAME,WACtDP,EAASM,GACRD,EAAMI,UAEbX,EAAMY,KAAKJ,EAEnB,CACJ,CAEMN,CAASD,GACRD,CACX,CAzF4Ba,CAAY9B,GAChCgB,GAAU,gBAAgBC,EAAMc,aAEhChB,EAASiB,OAAO,CAAEC,QAAS,oCAE3BjB,GAAU,4CACV,MAAMkB,EAAY,IAAIC,IAEtBlB,EAAMmB,SAAQC,IACV,MAAMC,EAAUpC,EAAKqC,SAASvC,EAAYE,EAAKsC,QAAQH,IACjDI,EAAWvC,EAAKC,SAASkC,GAE1BH,EAAUQ,IAAIJ,IACfJ,EAAUS,IAAIL,EAAS,IAE3BJ,EAAUU,IAAIN,IAAUT,KAAKY,EAAS,IAG1C,IAAK,MAAOI,EAAKC,KAAaZ,EAC1BlB,GAAU6B,EAAM,IAAIA,OAAW,MAC/BC,EAASV,SAAQC,IACbrB,GAAU,SAASqB,KAAQ,IAGnCrB,GAAU,KAEVD,EAASiB,OAAO,CAAEC,QAAS,6BAE3BjB,GAAU,mCAEV,IAAI+B,EAAiB,EACrB,IAAK,MAAMV,KAAQpB,EACf,IACI,MAAM+B,QAAgBpD,EAAGqD,SAASZ,EAAM,QAClCa,EAAY,IAAIC,OAAO,IAC7BnC,GAAU,GAAGkC,MACblC,GAAU,kBAAkBqB,MAC5BrB,GAAU,kBAAkBd,EAAKqC,SAASvC,EAAYqC,OACtDrB,GAAU,GAAGkC,QACblC,GAAUgC,EACVhC,GAAU,OAEV+B,IACAhC,EAASiB,OAAO,CACZC,QAAS,wBAAwBc,KAAkB9B,EAAMc,UACzDqB,UAAY,IAAMnC,EAAMc,QAEhC,CAAE,MAAOsB,GACLrC,GAAU,sBAAsBqB,MAASgB,OAC7C,OAGEzD,EAAG0D,UAAU/C,EAAYS,EAAQ,OAAO,GAEtD,CAjKsBuC,CAAqBvD,EAAYO,cACjCiD,EAAmBvD,EAAgBM,EAE7C,CAGA,MAAMkD,EAmBlB,SAA0BC,GACtB,MAAMD,EAA8B,GAGpC,GAAIpE,EAAOK,OAAOiE,iBAAkB,CAChC,MAAMC,EAAavE,EAAOK,OAAOmE,mBAC5BC,QAAOC,GAAUA,EAAOC,YACxBC,KAAIF,GAAUA,EAAOG,SAASzE,MACnCgE,EAAc5B,QAAQ+B,EAC1B,CAGA,MAAMO,EAAoB9E,EAAO+E,UAAUC,cACtCP,QAAOQ,GAA0B,SAAnBA,EAAI7E,IAAI8E,SAAqC,IAAhBD,EAAIE,UAC/CP,KAAIK,GAAOA,EAAI7E,MASpB,OARAgE,EAAc5B,QAAQsC,GAGjBV,EAAcgB,MAAKhF,GAAOA,EAAIK,SAAW4D,EAAW5D,UACrD2D,EAAc5B,KAAK6B,GAIhBgB,MAAMC,KAAK,IAAIC,IAAInB,EAAcQ,KAAIxE,GAAOA,EAAIK,WAClDmE,KAAInE,GAAUT,EAAOwF,IAAIxC,KAAKvC,IACvC,CA5CkCgF,CAAiBrF,GACjCO,EAAaE,EAAKsC,QAAQ/C,EAAIK,QAC9BiF,GAAY,IAAI3E,MAAOC,cAAcC,QAAQ,QAAS,KACtDL,EAAiBwD,EAAc1B,OAAS,EAC1C,kBAAkBgD,QAClB,eAAeA,QACbxE,EAAaL,EAAKM,KAAKR,EAAYC,SAwCrDT,eAA4ByB,EAAqBV,EAAoByE,SAC3D3F,EAAOK,OAAOe,aAAa,CAC7BC,SAAUrB,EAAOsB,iBAAiBC,aAClCC,MAAO,6BACPC,aAAa,IACdtB,MAAOuB,IACN,IAAIC,EAAS,qCACbA,GAAU,cAAcgE,MACxBhE,GAAU,eAAc,IAAIZ,MAAOC,kBACnCW,GAAU,gBAAgBC,EAAMc,aAEhCf,GAAU,mCACVC,EAAMmB,SAAQC,IACVrB,GAAU,GAAGd,EAAKqC,SAASyC,EAAU3C,EAAKvC,WAAW,IAEzDkB,GAAU,KAEVA,GAAU,mCAEV,IAAI+B,EAAiB,EACrB,IAAK,MAAMV,KAAQpB,EACf,IACI,MAAM+B,QAAgBpD,EAAGqD,SAASZ,EAAKvC,OAAQ,QACzCoD,EAAY,IAAIC,OAAO,IAC7BnC,GAAU,GAAGkC,MACblC,GAAU,kBAAkBqB,EAAKvC,WACjCkB,GAAU,kBAAkBd,EAAKqC,SAASyC,EAAU3C,EAAKvC,YACzDkB,GAAU,GAAGkC,QACblC,GAAUgC,EACVhC,GAAU,OAEV+B,IACAhC,EAASiB,OAAO,CACZC,QAAS,wBAAwBc,KAAkB9B,EAAMc,UACzDqB,UAAY,IAAMnC,EAAMc,QAEhC,CAAE,MAAOsB,GACLrC,GAAU,sBAAsBqB,EAAKvC,WAAWuD,OACpD,OAGEzD,EAAG0D,UAAU/C,EAAYS,EAAQ,OAAO,GAEtD,CAjFkBiE,CAAaxB,EAAelD,EAAYP,SACxCwD,EAAmBvD,EAAgBM,EAE7C,CAAE,MAAO8C,GACLhE,EAAOK,OAAOC,iBAAiB,6BAA6B0D,IAChE,KAGJpE,EAAQiG,cAAcrD,KAAKzC,EAC/B,EA+KA,wBAA8B,EA9N9B,kBACA,YACA,YAyLAI,eAAegE,EAAmBvD,EAAwBM,GAMtD,GAAe,oBALMlB,EAAOK,OAAOyF,uBAC/B,qCAAqClF,IACrC,aAGwB,CACxB,MAAMqE,QAAYjF,EAAO+E,UAAUgB,iBAAiB7E,SAC9ClB,EAAOK,OAAO2F,iBAAiBf,EACzC,CACJ,C,UCrMAgB,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,c,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://aicontext/./src/extension.ts","webpack://aicontext/external commonjs \"vscode\"","webpack://aicontext/external node-commonjs \"fs/promises\"","webpack://aicontext/external node-commonjs \"path\"","webpack://aicontext/webpack/bootstrap","webpack://aicontext/webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from 'fs/promises';\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('AI Context Extractor is now active');\n\n    const disposable = vscode.commands.registerCommand('aicontext.extractFolder', async (uri: vscode.Uri) => {\n        try {\n            if (!uri) {\n                vscode.window.showErrorMessage('Please select a file or folder to extract context from');\n                return;\n            }\n\n            const stats = await fs.stat(uri.fsPath);\n\n            // Handle folder case\n            if (stats.isDirectory()) {\n                const folderPath = uri.fsPath;\n                const folderName = path.basename(folderPath);\n                const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n                const outputFileName = `${folderName}_${timestamp}.txt`;\n                const outputPath = path.join(folderPath, outputFileName);\n\n                await processFolderContent(folderPath, outputPath);\n                await showSuccessMessage(outputFileName, outputPath);\n                return;\n            }\n\n            // Handle file case(s)\n            const selectedFiles = getSelectedFiles(uri);\n            const folderPath = path.dirname(uri.fsPath);\n            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n            const outputFileName = selectedFiles.length > 1 ? \n                `selected_files_${timestamp}.txt` : \n                `single_file_${timestamp}.txt`;\n            const outputPath = path.join(folderPath, outputFileName);\n\n            await processFiles(selectedFiles, outputPath, folderPath);\n            await showSuccessMessage(outputFileName, outputPath);\n\n        } catch (error) {\n            vscode.window.showErrorMessage(`Error extracting context: ${error}`);\n        }\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction getSelectedFiles(clickedUri: vscode.Uri): vscode.Uri[] {\n    const selectedFiles: vscode.Uri[] = [];\n    \n    // Get all selected files from the explorer\n    if (vscode.window.activeTextEditor) {\n        const selections = vscode.window.visibleTextEditors\n            .filter(editor => editor.selection)\n            .map(editor => editor.document.uri);\n        selectedFiles.push(...selections);\n    }\n\n    // Get files from workspace selection\n    const workspaceSelected = vscode.workspace.textDocuments\n        .filter(doc => doc.uri.scheme === 'file' && doc.isDirty === false)\n        .map(doc => doc.uri);\n    selectedFiles.push(...workspaceSelected);\n\n    // Always include the file that was right-clicked\n    if (!selectedFiles.some(uri => uri.fsPath === clickedUri.fsPath)) {\n        selectedFiles.push(clickedUri);\n    }\n\n    // Remove duplicates\n    return Array.from(new Set(selectedFiles.map(uri => uri.fsPath)))\n        .map(fsPath => vscode.Uri.file(fsPath));\n}\n\nasync function processFiles(files: vscode.Uri[], outputPath: string, rootPath: string): Promise<void> {\n    await vscode.window.withProgress({\n        location: vscode.ProgressLocation.Notification,\n        title: \"Extracting file context...\",\n        cancellable: true\n    }, async (progress) => {\n        let output = 'FILE EXTRACTION\\n===============\\n';\n        output += `Root Path: ${rootPath}\\n`;\n        output += `Scan Date: ${new Date().toISOString()}\\n`;\n        output += `Total Files: ${files.length}\\n\\n`;\n\n        output += 'SELECTED FILES\\n==============\\n';\n        files.forEach(file => {\n            output += `${path.relative(rootPath, file.fsPath)}\\n`;\n        });\n        output += '\\n';\n\n        output += 'FILE CONTENTS\\n=============\\n\\n';\n\n        let processedFiles = 0;\n        for (const file of files) {\n            try {\n                const content = await fs.readFile(file.fsPath, 'utf8');\n                const separator = '='.repeat(80);\n                output += `${separator}\\n`;\n                output += `Absolute Path: ${file.fsPath}\\n`;\n                output += `Relative Path: ${path.relative(rootPath, file.fsPath)}\\n`;\n                output += `${separator}\\n\\n`;\n                output += content;\n                output += '\\n\\n';\n\n                processedFiles++;\n                progress.report({\n                    message: `Processing files... (${processedFiles}/${files.length})`,\n                    increment: (100 / files.length)\n                });\n            } catch (error) {\n                output += `Error reading file ${file.fsPath}: ${error}\\n\\n`;\n            }\n        }\n\n        await fs.writeFile(outputPath, output, 'utf8');\n    });\n}\n\nasync function processFolderContent(folderPath: string, outputPath: string): Promise<void> {\n    await vscode.window.withProgress({\n        location: vscode.ProgressLocation.Notification,\n        title: \"Extracting folder context...\",\n        cancellable: true\n    }, async (progress) => {\n        let output = 'PROJECT METADATA\\n===============\\n';\n        output += `Project Root: ${folderPath}\\n`;\n        output += `Scan Date: ${new Date().toISOString()}\\n`;\n\n        const files = await getAllFiles(folderPath);\n        output += `Total Files: ${files.length}\\n\\n`;\n\n        progress.report({ message: \"Building directory structure...\" });\n\n        output += 'DIRECTORY STRUCTURE\\n==================\\n';\n        const structure = new Map<string, string[]>();\n        \n        files.forEach(file => {\n            const relPath = path.relative(folderPath, path.dirname(file));\n            const fileName = path.basename(file);\n            \n            if (!structure.has(relPath)) {\n                structure.set(relPath, []);\n            }\n            structure.get(relPath)?.push(fileName);\n        });\n\n        for (const [dir, fileList] of structure) {\n            output += dir ? `/${dir}/\\n` : '/\\n';\n            fileList.forEach(file => {\n                output += `  └── ${file}\\n`;\n            });\n        }\n        output += '\\n';\n\n        progress.report({ message: \"Reading file contents...\" });\n\n        output += 'FILE CONTENTS\\n=============\\n\\n';\n        \n        let processedFiles = 0;\n        for (const file of files) {\n            try {\n                const content = await fs.readFile(file, 'utf8');\n                const separator = '='.repeat(80);\n                output += `${separator}\\n`;\n                output += `Absolute Path: ${file}\\n`;\n                output += `Relative Path: ${path.relative(folderPath, file)}\\n`;\n                output += `${separator}\\n\\n`;\n                output += content;\n                output += '\\n\\n';\n\n                processedFiles++;\n                progress.report({\n                    message: `Processing files... (${processedFiles}/${files.length})`,\n                    increment: (100 / files.length)\n                });\n            } catch (error) {\n                output += `Error reading file ${file}: ${error}\\n\\n`;\n            }\n        }\n\n        await fs.writeFile(outputPath, output, 'utf8');\n    });\n}\n\nasync function showSuccessMessage(outputFileName: string, outputPath: string): Promise<void> {\n    const action = await vscode.window.showInformationMessage(\n        `Successfully extracted context to ${outputFileName}`,\n        'Open File'\n    );\n\n    if (action === 'Open File') {\n        const doc = await vscode.workspace.openTextDocument(outputPath);\n        await vscode.window.showTextDocument(doc);\n    }\n}\n\nasync function getAllFiles(dirPath: string): Promise<string[]> {\n    const files: string[] = [];\n    \n    async function traverse(currentPath: string) {\n        const entries = await fs.readdir(currentPath, { withFileTypes: true });\n        \n        for (const entry of entries) {\n            const fullPath = path.join(currentPath, entry.name);\n            \n            // Skip node_modules and .git directories\n            if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n                await traverse(fullPath);\n            } else if (entry.isFile()) {\n                // You can add file extension filtering here if needed\n                files.push(fullPath);\n            }\n        }\n    }\n\n    await traverse(dirPath);\n    return files;\n}\n\nexport function deactivate() {}","module.exports = require(\"vscode\");","module.exports = require(\"fs/promises\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","disposable","vscode","commands","registerCommand","async","uri","window","showErrorMessage","fs","stat","fsPath","isDirectory","folderPath","outputFileName","path","basename","Date","toISOString","replace","outputPath","join","withProgress","location","ProgressLocation","Notification","title","cancellable","progress","output","files","dirPath","traverse","currentPath","entries","readdir","withFileTypes","entry","fullPath","name","startsWith","isFile","push","getAllFiles","length","report","message","structure","Map","forEach","file","relPath","relative","dirname","fileName","has","set","get","dir","fileList","processedFiles","content","readFile","separator","repeat","increment","error","writeFile","processFolderContent","showSuccessMessage","selectedFiles","clickedUri","activeTextEditor","selections","visibleTextEditors","filter","editor","selection","map","document","workspaceSelected","workspace","textDocuments","doc","scheme","isDirty","some","Array","from","Set","Uri","getSelectedFiles","timestamp","rootPath","processFiles","subscriptions","showInformationMessage","openTextDocument","showTextDocument","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}