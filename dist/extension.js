(()=>{"use strict";var t={265:function(t,e,n){var o,a=this&&this.__createBinding||(Object.create?function(t,e,n,o){void 0===o&&(o=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,o,a)}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]}),i=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=this&&this.__importStar||(o=function(t){return o=Object.getOwnPropertyNames||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[e.length]=n);return e},o(t)},function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n=o(t),r=0;r<n.length;r++)"default"!==n[r]&&a(e,t,n[r]);return i(e,t),e});Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(t){console.log("AI Context Extractor is now active");const e=s.commands.registerCommand("aicontext.extractFolder",(async(t,e)=>{try{if(!t)return void s.window.showErrorMessage("Please select a file or folder to extract context from");const n=!0===s.workspace.getConfiguration("aicontext").get("createTxtFileByDefault");if((await l.stat(t.fsPath)).isDirectory()){const e=t.fsPath,o=`${c.basename(e)}_${(new Date).toISOString().replace(/[:.]/g,"-")}.txt`,a=c.join(e,o);return await async function(t,e,n){await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Extracting folder context...",cancellable:!0},(async o=>{let a="PROJECT METADATA\n===============\n";a+=`Project Root: ${t}\n`,a+=`Scan Date: ${(new Date).toISOString()}\n`;const i=await async function(t){const e=[];return await async function t(n){const o=await l.readdir(n,{withFileTypes:!0});for(const a of o){const o=c.join(n,a.name);a.isDirectory()&&!a.name.startsWith(".")&&"node_modules"!==a.name?await t(o):a.isFile()&&e.push(o)}}(t),e}(t);a+=`Total Files: ${i.length}\n\n`,o.report({message:"Building directory structure..."}),a+="DIRECTORY STRUCTURE\n==================\n";const r=new Map;i.forEach((e=>{const n=c.relative(t,c.dirname(e)),o=c.basename(e);r.has(n)||r.set(n,[]),r.get(n)?.push(o)}));for(const[t,e]of r)a+=t?`/${t}/\n`:"/\n",e.forEach((t=>{a+=`  └── ${t}\n`}));a+="\n",o.report({message:"Reading file contents..."}),a+="FILE CONTENTS\n=============\n\n";let f=0;for(const e of i)try{const n=await l.readFile(e,"utf8"),r="=".repeat(80);a+=`${r}\n`,a+=`Absolute Path: ${e}\n`,a+=`Relative Path: ${c.relative(t,e)}\n`,a+=`${r}\n\n`,a+=n,a+="\n\n",f++,o.report({message:`Processing files... (${f}/${i.length})`,increment:100/i.length})}catch(t){a+=`Error reading file ${e}: ${t}\n\n`}n&&await l.writeFile(e,a,"utf8"),await s.env.clipboard.writeText(a)}))}(e,a,n),void(n?await f(o,a):await u())}const o=e||function(t){const e=[...s.window.activeTextEditor?.document?[s.window.activeTextEditor.document.uri]:[],...s.window.visibleTextEditors.map((t=>t.document.uri))];return e.some((e=>e.fsPath===t.fsPath))||e.push(t),Array.from(new Set(e)).filter((t=>"file"===t.scheme)).map((t=>s.Uri.file(t.fsPath)))}(t),a=c.dirname(t.fsPath),i=(new Date).toISOString().replace(/[:.]/g,"-"),r=o.length>1?`selected_files_${i}.txt`:`single_file_${i}.txt`,w=c.join(a,r);await async function(t,e,n,o){await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Extracting file context...",cancellable:!0},(async a=>{let i="FILE EXTRACTION\n===============\n";i+=`Root Path: ${n}\n`,i+=`Scan Date: ${(new Date).toISOString()}\n`,i+=`Total Files: ${t.length}\n\n`,i+="SELECTED FILES\n==============\n",t.forEach((t=>{i+=`${c.relative(n,t.fsPath)}\n`})),i+="\n",i+="FILE CONTENTS\n=============\n\n";let r=0;for(const e of t)try{const o=await l.readFile(e.fsPath,"utf8"),s="=".repeat(80);i+=`${s}\n`,i+=`Absolute Path: ${e.fsPath}\n`,i+=`Relative Path: ${c.relative(n,e.fsPath)}\n`,i+=`${s}\n\n`,i+=o,i+="\n\n",r++,a.report({message:`Processing files... (${r}/${t.length})`,increment:100/t.length})}catch(t){i+=`Error reading file ${e.fsPath}: ${t}\n\n`}o&&await l.writeFile(e,i,"utf8"),await s.env.clipboard.writeText(i)}))}(o,w,a,n),n?await f(r,w):await u()}catch(t){s.window.showErrorMessage(`Error extracting context: ${t}`)}}));t.subscriptions.push(e)},e.deactivate=function(){};const s=r(n(398)),c=r(n(928)),l=r(n(943));async function f(t,e){if("Open File"===await s.window.showInformationMessage(`Successfully extracted context to ${t} (and copied to clipboard).`,"Open File")){const t=await s.workspace.openTextDocument(e);await s.window.showTextDocument(t)}}async function u(){await s.window.showInformationMessage("Context copied to clipboard (no .txt file created).")}},398:t=>{t.exports=require("vscode")},943:t=>{t.exports=require("fs/promises")},928:t=>{t.exports=require("path")}},e={},n=function n(o){var a=e[o];if(void 0!==a)return a.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}(265);module.exports=n})();