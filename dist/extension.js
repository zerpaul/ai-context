(()=>{"use strict";var t={265:function(t,e,n){var r,o=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(e,n);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,o)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||(r=function(t){return r=Object.getOwnPropertyNames||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[e.length]=n);return e},r(t)},function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n=r(t),i=0;i<n.length;i++)"default"!==n[i]&&o(e,t,n[i]);return a(e,t),e});Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(t){console.log("AI Context Extractor is now active");const e=s.commands.registerCommand("aicontext.extractFolder",(async t=>{try{if(!t)return void s.window.showErrorMessage("Please select a file or folder to extract context from");if((await l.stat(t.fsPath)).isDirectory()){const e=t.fsPath,n=`${c.basename(e)}_${(new Date).toISOString().replace(/[:.]/g,"-")}.txt`,r=c.join(e,n);return await async function(t,e){await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Extracting folder context...",cancellable:!0},(async n=>{let r="PROJECT METADATA\n===============\n";r+=`Project Root: ${t}\n`,r+=`Scan Date: ${(new Date).toISOString()}\n`;const o=await async function(t){const e=[];return await async function t(n){const r=await l.readdir(n,{withFileTypes:!0});for(const o of r){const r=c.join(n,o.name);o.isDirectory()&&!o.name.startsWith(".")&&"node_modules"!==o.name?await t(r):o.isFile()&&e.push(r)}}(t),e}(t);r+=`Total Files: ${o.length}\n\n`,n.report({message:"Building directory structure..."}),r+="DIRECTORY STRUCTURE\n==================\n";const a=new Map;o.forEach((e=>{const n=c.relative(t,c.dirname(e)),r=c.basename(e);a.has(n)||a.set(n,[]),a.get(n)?.push(r)}));for(const[t,e]of a)r+=t?`/${t}/\n`:"/\n",e.forEach((t=>{r+=`  └── ${t}\n`}));r+="\n",n.report({message:"Reading file contents..."}),r+="FILE CONTENTS\n=============\n\n";let i=0;for(const e of o)try{const a=await l.readFile(e,"utf8"),s="=".repeat(80);r+=`${s}\n`,r+=`Absolute Path: ${e}\n`,r+=`Relative Path: ${c.relative(t,e)}\n`,r+=`${s}\n\n`,r+=a,r+="\n\n",i++,n.report({message:`Processing files... (${i}/${o.length})`,increment:100/o.length})}catch(t){r+=`Error reading file ${e}: ${t}\n\n`}await l.writeFile(e,r,"utf8")}))}(e,r),void await f(n,r)}const e=function(t){const e=[];if(s.window.activeTextEditor){const t=s.window.visibleTextEditors.filter((t=>t.selection)).map((t=>t.document.uri));e.push(...t)}const n=s.workspace.textDocuments.filter((t=>"file"===t.uri.scheme&&!1===t.isDirty)).map((t=>t.uri));return e.push(...n),e.some((e=>e.fsPath===t.fsPath))||e.push(t),Array.from(new Set(e.map((t=>t.fsPath)))).map((t=>s.Uri.file(t)))}(t),n=c.dirname(t.fsPath),r=(new Date).toISOString().replace(/[:.]/g,"-"),o=e.length>1?`selected_files_${r}.txt`:`single_file_${r}.txt`,a=c.join(n,o);await async function(t,e,n){await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Extracting file context...",cancellable:!0},(async r=>{let o="FILE EXTRACTION\n===============\n";o+=`Root Path: ${n}\n`,o+=`Scan Date: ${(new Date).toISOString()}\n`,o+=`Total Files: ${t.length}\n\n`,o+="SELECTED FILES\n==============\n",t.forEach((t=>{o+=`${c.relative(n,t.fsPath)}\n`})),o+="\n",o+="FILE CONTENTS\n=============\n\n";let a=0;for(const e of t)try{const i=await l.readFile(e.fsPath,"utf8"),s="=".repeat(80);o+=`${s}\n`,o+=`Absolute Path: ${e.fsPath}\n`,o+=`Relative Path: ${c.relative(n,e.fsPath)}\n`,o+=`${s}\n\n`,o+=i,o+="\n\n",a++,r.report({message:`Processing files... (${a}/${t.length})`,increment:100/t.length})}catch(t){o+=`Error reading file ${e.fsPath}: ${t}\n\n`}await l.writeFile(e,o,"utf8")}))}(e,a,n),await f(o,a)}catch(t){s.window.showErrorMessage(`Error extracting context: ${t}`)}}));t.subscriptions.push(e)},e.deactivate=function(){};const s=i(n(398)),c=i(n(928)),l=i(n(943));async function f(t,e){if("Open File"===await s.window.showInformationMessage(`Successfully extracted context to ${t}`,"Open File")){const t=await s.workspace.openTextDocument(e);await s.window.showTextDocument(t)}}},398:t=>{t.exports=require("vscode")},943:t=>{t.exports=require("fs/promises")},928:t=>{t.exports=require("path")}},e={},n=function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={exports:{}};return t[r].call(a.exports,a,a.exports,n),a.exports}(265);module.exports=n})();