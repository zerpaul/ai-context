(()=>{"use strict";var t={265:function(t,e,n){var o,r=this&&this.__createBinding||(Object.create?function(t,e,n,o){void 0===o&&(o=n);var r=Object.getOwnPropertyDescriptor(e,n);r&&!("get"in r?!e.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,o,r)}:function(t,e,n,o){void 0===o&&(o=n),t[o]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||(o=function(t){return o=Object.getOwnPropertyNames||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[e.length]=n);return e},o(t)},function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n=o(t),i=0;i<n.length;i++)"default"!==n[i]&&r(e,t,n[i]);return a(e,t),e});Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(t){console.log("AI Context Extractor is now active");const e=s.commands.registerCommand("aicontext.extractFolder",(async t=>{try{if(!t)return void s.window.showErrorMessage("Please select a file or folder to extract context from");if((await l.stat(t.fsPath)).isDirectory()){const e=t.fsPath,n=`${c.basename(e)}_${(new Date).toISOString().replace(/[:.]/g,"-")}.txt`,o=c.join(e,n);return await async function(t,e){await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Extracting folder context...",cancellable:!0},(async n=>{let o="PROJECT METADATA\n===============\n";o+=`Project Root: ${t}\n`,o+=`Scan Date: ${(new Date).toISOString()}\n`;const r=await async function(t){const e=[];return await async function t(n){const o=await l.readdir(n,{withFileTypes:!0});for(const r of o){const o=c.join(n,r.name);r.isDirectory()&&!r.name.startsWith(".")&&"node_modules"!==r.name?await t(o):r.isFile()&&e.push(o)}}(t),e}(t);o+=`Total Files: ${r.length}\n\n`,n.report({message:"Building directory structure..."}),o+="DIRECTORY STRUCTURE\n==================\n";const a=new Map;r.forEach((e=>{const n=c.relative(t,c.dirname(e)),o=c.basename(e);a.has(n)||a.set(n,[]),a.get(n)?.push(o)}));for(const[t,e]of a)o+=t?`/${t}/\n`:"/\n",e.forEach((t=>{o+=`  └── ${t}\n`}));o+="\n",n.report({message:"Reading file contents..."}),o+="FILE CONTENTS\n=============\n\n";let i=0;for(const e of r)try{const a=await l.readFile(e,"utf8"),s="=".repeat(80);o+=`${s}\n`,o+=`Absolute Path: ${e}\n`,o+=`Relative Path: ${c.relative(t,e)}\n`,o+=`${s}\n\n`,o+=a,o+="\n\n",i++,n.report({message:`Processing files... (${i}/${r.length})`,increment:100/r.length})}catch(t){o+=`Error reading file ${e}: ${t}\n\n`}await l.writeFile(e,o,"utf8")}))}(e,o),void await f(n,o)}const e=function(t){const e=s.window.activeTextEditor?[s.window.activeTextEditor.document.uri]:[];return e.some((e=>e.fsPath===t.fsPath))||e.push(t),e}(t),n=c.dirname(t.fsPath),o=(new Date).toISOString().replace(/[:.]/g,"-"),r=e.length>1?`selected_files_${o}.txt`:`single_file_${o}.txt`,a=c.join(n,r);await async function(t,e,n){await s.window.withProgress({location:s.ProgressLocation.Notification,title:"Extracting file context...",cancellable:!0},(async o=>{let r="FILE EXTRACTION\n===============\n";r+=`Root Path: ${n}\n`,r+=`Scan Date: ${(new Date).toISOString()}\n`,r+=`Total Files: ${t.length}\n\n`,r+="SELECTED FILES\n==============\n",t.forEach((t=>{r+=`${c.relative(n,t.fsPath)}\n`})),r+="\n",r+="FILE CONTENTS\n=============\n\n";let a=0;for(const e of t)try{const i=await l.readFile(e.fsPath,"utf8"),s="=".repeat(80);r+=`${s}\n`,r+=`Absolute Path: ${e.fsPath}\n`,r+=`Relative Path: ${c.relative(n,e.fsPath)}\n`,r+=`${s}\n\n`,r+=i,r+="\n\n",a++,o.report({message:`Processing files... (${a}/${t.length})`,increment:100/t.length})}catch(t){r+=`Error reading file ${e.fsPath}: ${t}\n\n`}await l.writeFile(e,r,"utf8")}))}(e,a,n),await f(r,a)}catch(t){s.window.showErrorMessage(`Error extracting context: ${t}`)}}));t.subscriptions.push(e)},e.deactivate=function(){};const s=i(n(398)),c=i(n(928)),l=i(n(943));async function f(t,e){if("Open File"===await s.window.showInformationMessage(`Successfully extracted context to ${t}`,"Open File")){const t=await s.workspace.openTextDocument(e);await s.window.showTextDocument(t)}}},398:t=>{t.exports=require("vscode")},943:t=>{t.exports=require("fs/promises")},928:t=>{t.exports=require("path")}},e={},n=function n(o){var r=e[o];if(void 0!==r)return r.exports;var a=e[o]={exports:{}};return t[o].call(a.exports,a,a.exports,n),a.exports}(265);module.exports=n})();